{"version":3,"sources":["components/Task.js","components/Dropdown.js","services/tasks.js","services/category.js","App.js","index.js"],"names":["Task","task","toggleFinished","deleteTask","type","id","onClick","content","Dropdown","category","value","axios","get","then","response","data","newObject","post","put","delete","newElement","request","console","log","App","useState","tasks","setTasks","newTask","setNewTask","newCategory","setNewCategory","currentCategories","setCurrentCategories","useEffect","taskService","initialTasks","categoryService","categories","displayDate","Date","toDateString","map","i","key","find","n","changedTask","status","returnedTask","window","confirm","filter","onSubmit","event","preventDefault","replace","length","taskObject","Math","random","date","existingCategories","undefined","returnedCategory","concat","alert","onChange","target","list","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c60d97a8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Task = ({ task, toggleFinished, deleteTask }) => {\n/*     const label = task.status\n    ? 'finished' : 'not finished'\n */\n    return (\n        <div>\n            {/*<button onClick={toggleFinished}>{label}</button>*/}\n            <input type=\"checkbox\" id=\"myCheck\" onClick={toggleFinished}></input>\n            {task.content}\n            <button onClick={deleteTask}>x</button>\n        </div>\n    );\n};\n\nexport default Task;","import React from 'react';\n\nconst Dropdown = ({ category }) => {\n    return (\n        <option value={category} />\n    );\n};\n\nexport default Dropdown;","import axios from 'axios'\nconst baseUrl = 'api/tasks'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then((response) => response.data)\n}\n\nconst create = (newObject) => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then((response) => response.data)\n}\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then((response) => response.data)\n}\n\nconst deleteTask = (id) => {\n\treturn axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default { getAll, create, update, deleteTask }\n","import axios from 'axios'\nconst baseUrl = 'api/categories'\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then((response) => response.data)\n}\n\nconst create = (newElement) => {\n    const request = axios.post(baseUrl, newElement)\n    console.log(request.then((response) => response.data))\n\treturn request.then((response) => response.data)\n}\n\nexport default { getAll, create }\n","import React, { useState, useEffect } from 'react'\nimport Task from './components/Task'\nimport Dropdown from './components/Dropdown'\nimport taskService from './services/tasks'\nimport categoryService from './services/category'\n\nconst App = () => {\n\tconst [tasks, setTasks] = useState([])\n\tconst [newTask, setNewTask] = useState('')\n\tconst [newCategory, setNewCategory] = useState('')\n\tconst [currentCategories, setCurrentCategories] = useState([])\n\n\tuseEffect(() => {\n\t\tconsole.log('effect')\n\t\ttaskService.getAll().then((initialTasks) => {\n\t\t\tsetTasks(initialTasks)\n\t\t})\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconsole.log('categories')\n\t\tcategoryService.getAll().then((categories) => {\n\t\t\tsetCurrentCategories(categories)\n\t\t})\n\t}, [])\n\n\tconst addTask = (event) => {\n\t\tevent.preventDefault()\n\t\tconst category = !newCategory.replace(/\\s/g, '').length === true ? 'uncategorized' : newCategory\n\n\t\tconst taskObject = {\n\t\t\tcontent: newTask,\n\t\t\tid: Math.random(10000000),\n\t\t\tstatus: false,\n\t\t\tcategory: category,\n\t\t\tdate: Date(),\n\t\t}\n\n\t\tconst existingCategories = currentCategories.find((category) => category.id === category)\n\t\tconsole.log(existingCategories)\n\n\t\tif (existingCategories !== undefined) {\n\t\t\tcategoryService\n\t\t\t\t.create({category: category})\n\t\t\t\t.then((returnedCategory) => {\n\t\t\t\t\tconsole.log(returnedCategory)\n\t\t\t\t\t//setCurrentCategories(currentCategories.concat(returnedCategory))\n\t\t\t\t})\n\t\t}\n\n\t\tif (!newTask.replace(/\\s/g, '').length) {\n\t\t\talert('Please enter valid text.')\n\t\t\tsetNewTask('')\n\t\t} else {\n\t\t\ttaskService.create(taskObject).then((returnedTask) => {\n\t\t\t\tsetTasks(tasks.concat(returnedTask))\n\t\t\t\tsetNewTask('')\n\t\t\t\tsetNewCategory('')\n\t\t\t})\n\t\t}\n\t}\n\n\tconst handleTaskChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewTask(event.target.value)\n\t}\n\n\tconst handleCategoryChange = (event) => {\n\t\tsetNewCategory(event.target.value)\n\t}\n\n\tconst toggleFinished = (id) => {\n\t\tconst task = tasks.find((n) => n.id === id)\n\n\t\tconst changedTask = { ...task, status: !task.status }\n\n\t\ttaskService.update(id, changedTask).then((returnedTask) => {\n\t\t\tsetTasks(tasks.map((task) => (task.id !== id ? task : returnedTask)))\n\t\t})\n\t}\n\n\tconst deleteTask = (id) => {\n\t\tif (window.confirm('Are you sure you want to delete this?')) {\n\t\t\ttaskService.deleteTask(id)\n\t\t\tsetTasks(tasks.filter((task) => task.id !== id))\n\t\t}\n\t}\n\n\tvar date = new Date()\n\tvar displayDate = date.toDateString()\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Task List for {displayDate}</h2>\n\t\t\t<div>\n\t\t\t\t{tasks.map((task, i) => (\n\t\t\t\t\t<Task\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\ttoggleFinished={() => toggleFinished(task.id)}\n\t\t\t\t\t\tdeleteTask={() => deleteTask(task.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<form onSubmit={addTask}>\n\t\t\t\t<input value={newTask} onChange={handleTaskChange} />\n\t\t\t\t<input type='text' value={newCategory} onChange={handleCategoryChange} list='cats' />\n\t\t\t\t<datalist id='cats'>\n\t\t\t\t\t{currentCategories.map((category, i) => (\n\t\t\t\t\t\t<Dropdown key={i} category={category.category} />\n\t\t\t\t\t))}\n\t\t\t\t</datalist>\n\t\t\t\t<button type='submit'>save</button>\n\t\t\t</form>\n\t\t\t<div></div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}